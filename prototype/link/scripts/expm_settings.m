
% project settings
expmt.data_dir = '/jukebox/norman/lpiloto/workspace/MATLAB/DF/data/'
% key map that will hold all the information about our different parameters
expmt.params = containers.Map();
% this specifies the order of our parameters - required for directory based
% output of files as a function of parameter values i.e. if we had
% parameters: expmt.in_order_params = {'subject' 'session'} indicates that
% in our data folder, results will first be organized by subject, then by
% session.
expmt.in_order_params = {};
% key map that will hold all the function specific information
expmt.funcs = containers.Map();


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% define some globals

% this tells us the file name we use to load and save output for any function which uses expm_load_inputs / expm_save_output
expmt.FN_OUTPUT_FILENAME = 'expm_output.mat';

% this tells us the directory name where we will keep all our key value mappings which are generated by the default on_save_fn for parameters of type key_value_pair
expmt.KEY_VALUE_STORE_DIR = 'KEY_VALUE_PAIRS';

% this tells us where to keep our function specific log directory
expmt.LOG_DIR = '/jukebox/scratch/lpiloto/DF/log/';

% this works almost like an ENUM, specifying the value to pass into func.req_inputs to indicate that our 
% required input is not the output of a function, but instead raw data
%                        specify raw data file:
%                        entry = {expmt.RAW_DATA_INDICATOR, root folder name, name of file,optional function handle to apply or empty set to indicate load as matfile, varargin number of parameters for raw data location };
expmt.RAW_DATA_INDICATOR = 'raw_data';
% this tells us whether we should try to generate an input if we call a function that requires it but we find that it doesn't exist
expmt.GENERATE_REQD_INPUTS = false;


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% function / file dependencies

% run_cross_validation
func = struct();
func.fn_name = 'run_cross_validation.m';
func.req_inputs = {};
func.params = {'subject','mask_filename','classifier_fn_name','regularization_value','feature_select_fn_name','feature_select_thresh'};
func.outputs = {'mean_cv_accuracy','results'};

expmt.funcs(func.fn_name) = func;

% run_classifier_word_lists.m
func = struct();
func.fn_name = 'run_classifier_word_lists.m';
func.req_inputs = {};
func.params = {'subject','mask_filename','classifier_fn_name','regularization_value','feature_select_fn_name','feature_select_thresh'};
func.outputs = { 'results', 'forget_trs_means', 'remember_trs_means', 'list1_trs_means', 'list2_trs_means','all_forget_trs','all_remember_trs','all_list1_trs'};
expmt.funcs(func.fn_name) = func;

% xval_localizer_two_classes
func = struct();
func.fn_name = 'run_xval_two_classes.m';
func.req_inputs = {};
func.params = {'subject','mask_filename','classifier_fn_name','regularization_value','feature_select_fn_name','feature_select_thresh','img_localizer_idcs'};
func.outputs = {'mean_cv_accuracy','results'};

expmt.funcs(func.fn_name) = func;



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% parameter data
% NOTE: MAJOR WARNING! The order of parameter here defines the order of these parameters as listed in directories, so choose wisely at the beginning
% and make sure you ONLY ADD new parameters at the end of expmt.in_order_param_names, otherwise you'll fuck everything up. maybe this could be done in a more robust way,
% but there really is no point in adding flexibility to this.
expmt.params('feat_dir') = expm_param('feat_dir','string');
expmt.in_order_params{end+1} = 'feat_dir';
expmt.params('mask_filename') = expm_param('mask_filename','string');
expmt.in_order_params{end+1} = 'mask_filename';
expmt.params('classifier_fn_name') = expm_param('classifier_fn_name','string','default_value','train_logreg');
expmt.in_order_params{end+1} = 'classifier_fn_name';
expmt.params('regularization_value') = expm_param('regularization_value','int','default_value',0);
expmt.in_order_params{end+1} = 'regularization_value';
expmt.params('feature_select_fn_name') = expm_param('feature_select_fn_name','string','default_value','statmap_anova');
expmt.in_order_params{end+1} = 'feature_select_fn_name';
expmt.params('feature_select_thresh') = expm_param('feature_select_thresh','int','default_value',0.0001);
expmt.in_order_params{end+1} = 'feature_select_thresh';
expmt.params('img_localizer_idcs') = expm_param('img_localizer_idcs','key_value_pair');
expmt.in_order_params{end+1} = 'img_localizer_idcs';
expmt.params('subject') = expm_param('subject','string');
expmt.in_order_params{end+1} = 'subject';
